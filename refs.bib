@article{A*,
  author       = {Zeng, W. and
                  Church, R. L.},
  title        = {{Finding shortest paths on real road networks: the case for A*}},
  month        = apr,
  year         = 2009,
  publisher    = {Zenodo},
  doi          = {10.1080/13658810801949850},
  url          = {https://doi.org/10.1080/13658810801949850},
  journal      = {International Journal of Geographical Information Science},
  volume       = 23,
  number       = 4
}
@article{Johnson,
  author = {Johnson, Donald B.},
  title = {Efficient Algorithms for Shortest Paths in Sparse Networks},
  year = {1977},
  issue_date = {Jan. 1977},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {24},
  number = {1},
  issn = {0004-5411},
  url = {https://doi.org/10.1145/321992.321993},
  doi = {10.1145/321992.321993},
  abstract = {Algorithms for finding shortest paths are presented which are faster than algorithms previously known on networks which are relatively sparse in arcs. Known results which the results of this paper extend are surveyed briefly and analyzed. A new implementation for priority queues is employed, and a class of “arc set partition” algorithms is introduced. For the single source problem on networks with nonnegative arcs a running time of O(min(n1+1/k + e, n + e) log n)) is achieved, where there are n nodes and e arcs, and k is a fixed integer satisfying k > 0. This bound is O(e) on dense networks. For the single source and all pairs problem on unrestricted networks the running time is O(min(n2+1/k + ne, n2 log n + ne log n).},
  journal = {J. ACM},
  month = {1},
  pages = {1–13},
  numpages = {13}
}
@article{Floyd,
  author = {Floyd, Robert W.},
  title = {Algorithm 97: Shortest path},
  year = {1962},
  issue_date = {June 1962},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {5},
  number = {6},
  issn = {0001-0782},
  url = {https://doi.org/10.1145/367766.368168},
  doi = {10.1145/367766.368168},
  journal = {Commun. ACM},
  month = {6},
  pages = {345},
  numpages = {1}
}
@book{Introduction,
  title={Introduction to Algorithms, fourth edition},
  author={Cormen, T.H. and Leiserson, C.E. and Rivest, R.L. and Stein, C.},
  isbn={9780262046305},
  lccn={2021037260},
  url={https://books.google.be/books?id=HOJyzgEACAAJ},
  year={2022},
  publisher={MIT Press}
}
@article{Scaling,
  title = {Scaling algorithms for network problems},
  journal = {Journal of Computer and System Sciences},
  volume = {31},
  number = {2},
  pages = {148-168},
  year = {1985},
  issn = {0022-0000},
  doi = {https://doi.org/10.1016/0022-0000(85)90039-X},
  url = {https://www.sciencedirect.com/science/article/pii/002200008590039X},
  author = {Harold N. Gabow},
  abstract = {This paper gives algorithms for network problems that work by scaling the numeric parameters. Assume all parameters are integers. Let n, m, and N denote the number of vertices, number of edges, and largest parameter of the network, respectively. A scaling algorithm for maximum weight matching on a bipartite graph runs in O(n34m log N) time. For appropriate N this improves the traditional Hungarian method, whose most efficient implementation is O(n(m +n log n)). The speedup results from finding augmenting paths in batches. The matching algorithm gives similar improvements for the following problems: single-source shortest paths for arbitrary edge lengths (Bellman's algorithm); maximum weight degree-constrained subgraph; minimum cost flow on a 0–1 network. Scaling gives a simple maximum value flow algorithm that matches the best known bound (Sleator and Tarjan's algorithm) when log N=O(log n). Scaling also gives a good algorithm for shortest paths on a directed graph with nonnegative edge lengths (Dijkstra's algorithm).}
}
@article{FasterScaling,
  author = {Gabow, Harold N. and Tarjan, Robert E.},
  title = {Faster Scaling Algorithms for Network Problems},
  journal = {SIAM Journal on Computing},
  volume = {18},
  number = {5},
  pages = {1013-1036},
  year = {1989},
  doi = {10.1137/0218069},
  URL = {https://doi.org/10.1137/0218069},
  eprint = {https://doi.org/10.1137/0218069},
  abstract = { This paper presents algorithms for the assignment problem, the transportation problem, and the minimum-cost flow problem of operations research. The algorithms find a minimum-cost solution, yet run in time close to the best-known bounds for the corresponding problems without costs. For example, the assignment problem (equivalently, minimum-cost matching in a bipartite graph) can be solved in \$O(\sqrt {nm} \log (nN))\$ time, where \$n,m\$, and N denote the number of vertices, number of edges, and largest magnitude of a cost; costs are assumed to be integral. The algorithms work by scaling. As in the work of Goldberg and Tarjan, in each scaled problem an approximate optimum solution is found, rather than an exact optimum. }
}
@article{Fibonacci,
  author = {Fredman, Michael L. and Tarjan, Robert Endre},
  title = {Fibonacci heaps and their uses in improved network optimization algorithms},
  year = {1987},
  issue_date = {July 1987},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {34},
  number = {3},
  issn = {0004-5411},
  url = {https://doi.org/10.1145/28869.28874},
  doi = {10.1145/28869.28874},
  abstract = {In this paper we develop a new data structure for implementing heaps (priority queues). Our structure, Fibonacci heaps (abbreviated F-heaps), extends the binomial queues proposed by Vuillemin and studied further by Brown. F-heaps support arbitrary deletion from an n-item heap in O(log n) amortized time and all other standard heap operations in O(1) amortized time. Using F-heaps we are able to obtain improved running times for several network optimization algorithms. In particular, we obtain the following worst-case bounds, where n is the number of vertices and m the number of edges in the problem graph: O(n log n + m) for the single-source shortest path problem with nonnegative edge lengths, improved from O(mlog(m/n+2)n);  O(n2log n + nm) for the all-pairs shortest path problem, improved from O(nm log(m/n+2)n);  O(n2log n + nm) for the assignment problem (weighted bipartite matching), improved from O(nmlog(m/n+2)n);  O(mβ(m, n)) for the minimum spanning tree problem, improved from O(mlog log(m/n+2)n); where β(m, n) = min {i | log(i)n ≤ m/n}. Note that β(m, n) ≤ log*n if m ≥ n.  Of these results, the improved bound for minimum spanning trees is the most striking, although all the results give asymptotic improvements for graphs of appropriate densities.},
  journal = {J. ACM},
  month = {7},
  pages = {596–615},
  numpages = {20}
}
@MISC {negatief,
    TITLE = {Real life examples of negative weight edges in graphs},
    AUTHOR = {John Kemeny (https://cs.stackexchange.com/users/4249/john-kemeny)},
    HOWPUBLISHED = {Computer Science Stack Exchange},
    NOTE = {URL:https://cs.stackexchange.com/q/146322 (version: 2021-12-02)},
    EPRINT = {https://cs.stackexchange.com/q/146322},
    URL = {https://cs.stackexchange.com/q/146322}
}
@misc{bernstein2023negativeweight,
  title={Negative-Weight Single-Source Shortest Paths in Near-linear Time}, 
  author={Aaron Bernstein and Danupon Nanongkai and Christian Wulff-Nilsen},
  year={2023},
  eprint={2203.03456},
  archivePrefix={arXiv},
  primaryClass={cs.DS}
}
@book{combinatorialOptimization,
  author = {Papadimitriou, Christos and Steiglitz, Kenneth},
  year = {1982},
  month = {01},
  pages = {},
  title = {Combinatorial Optimization: Algorithms and Complexity},
  volume = {32},
  isbn = {0-13-152462-3},
  journal = {IEEE Transactions on Acoustics, Speech, and Signal Processing},
  doi = {10.1109/TASSP.1984.1164450},
  publisher = {Englewood Cliffs, N.J. : Prentice Hall}
}
@misc{BGL,
    title = {Boost Graph Library Table of Contents},
    author = {Boost contributors},
    howpublished = {Boost website},
    note = {URL:https://www.boost.org/doc/libs/1_85_0/libs/graph/doc/table_of_contents.html (accessed: 07.10.2024)},
    eprint = {https://www.boost.org/doc/libs/1_85_0/libs/graph/doc/table_of_contents.html},
    url = {https://www.boost.org/doc/libs/1_85_0/libs/graph/doc/table_of_contents.html}
}
